var search_data = {"index":{"searchIndex":["ability","type","applicationcable","channel","connection","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","armor","distance","character","codex","distance","characterclass","characterclasses","charactercreation","codex","type","dice","roll","distance","refinements","heavyarmor","distance","kernel","languagesset","lightarmor","mediumarmor","proficienciesset","race","distance","races","distance","*()","+()","+()","-()","/()","<<()","<=>()","==()","==()","dice()","distance()","ability_score_increases()","ability_score_increases=()","ac()","ac()","ac()","add()","add()","alter_ability()","base_speed()","cast()","cast()","changed_in_place?()","character()","character_class=()","choose_character_class()","choose_race()","darkvision()","darkvision()","darkvision=()","expand()","extend_object()","feet()","foot()","gain_language()","gain_proficiency()","hit_dice()","hit_die_type()","hit_die_type=()","include?()","languages()","languages=()","modifier()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse()","proficiencies()","proficiencies=()","race=()","required_strength()","roll!()","serialize()","serialize()","speed()","speed()","speed=()","speed_penalty()","speed_penalty()","subrace()","to_f()","to_i()","to_s()","total()","manifest.js","application.js","cable.js","application.css","application.js"],"longSearchIndex":["ability","ability::type","applicationcable","applicationcable::channel","applicationcable::connection","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","armor","armor::distance","character","character::codex","character::distance","characterclass","characterclasses","charactercreation","codex","codex::type","dice","dice::roll","distance","distance::refinements","heavyarmor","heavyarmor::distance","kernel","languagesset","lightarmor","mediumarmor","proficienciesset","race","race::distance","races","races::distance","distance#*()","ability#+()","distance#+()","distance#-()","distance#/()","codex#<<()","distance#<=>()","dice#==()","distance#==()","kernel::dice()","kernel::distance()","race#ability_score_increases()","race#ability_score_increases=()","armor#ac()","lightarmor#ac()","mediumarmor#ac()","ability#add()","codex#add()","character#alter_ability()","character#base_speed()","ability::type#cast()","codex::type#cast()","codex::type#changed_in_place?()","charactercreation#character()","character#character_class=()","charactercreation#choose_character_class()","charactercreation#choose_race()","character#darkvision()","race#darkvision()","race#darkvision=()","codex#expand()","race#extend_object()","distance::refinements#feet()","distance::refinements#foot()","character#gain_language()","character#gain_proficiency()","character#hit_dice()","characterclass#hit_die_type()","characterclass#hit_die_type=()","codex#include?()","race#languages()","race#languages=()","ability#modifier()","ability::new()","armor::new()","characterclass::new()","codex::new()","codex::type::new()","dice::new()","dice::roll::new()","distance::new()","heavyarmor::new()","race::new()","dice::parse()","race#proficiencies()","race#proficiencies=()","character#race=()","heavyarmor#required_strength()","dice#roll!()","ability::type#serialize()","codex::type#serialize()","character#speed()","race#speed()","race#speed=()","armor#speed_penalty()","heavyarmor#speed_penalty()","race#subrace()","distance#to_f()","distance#to_i()","distance#to_s()","dice::roll#total()","","","","",""],"info":[["Ability","","Ability.html","",""],["Ability::Type","","Ability/Type.html","",""],["ApplicationCable","","ApplicationCable.html","",""],["ApplicationCable::Channel","","ApplicationCable/Channel.html","",""],["ApplicationCable::Connection","","ApplicationCable/Connection.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["ApplicationJob","","ApplicationJob.html","",""],["ApplicationMailer","","ApplicationMailer.html","",""],["ApplicationRecord","","ApplicationRecord.html","",""],["Armor","","Armor.html","",""],["Armor::Distance","","Armor/Distance.html","",""],["Character","","Character.html","",""],["Character::Codex","","Character/Codex.html","",""],["Character::Distance","","Character/Distance.html","",""],["CharacterClass","","CharacterClass.html","",""],["CharacterClasses","","CharacterClasses.html","",""],["CharacterCreation","","CharacterCreation.html","",""],["Codex","","Codex.html","",""],["Codex::Type","","Codex/Type.html","",""],["Dice","","Dice.html","","<p>A Dice represents a die or group of dice to be rolled\n<p>Even though a single die can sometimes be rolled …\n"],["Dice::Roll","","Dice/Roll.html","","<p>A Dice::Roll represents the <em>results</em> of a dice roll. It can be used\nas an Integer in most cases (ie. additions, …\n"],["Distance","","Distance.html","",""],["Distance::Refinements","","Distance/Refinements.html","",""],["HeavyArmor","","HeavyArmor.html","",""],["HeavyArmor::Distance","","HeavyArmor/Distance.html","",""],["Kernel","","Kernel.html","",""],["LanguagesSet","","LanguagesSet.html","",""],["LightArmor","","LightArmor.html","",""],["MediumArmor","","MediumArmor.html","",""],["ProficienciesSet","","ProficienciesSet.html","",""],["Race","","Race.html","",""],["Race::Distance","","Race/Distance.html","",""],["Races","","Races.html","",""],["Races::Distance","","Races/Distance.html","",""],["*","Distance","Distance.html#method-i-2A","(other)",""],["+","Ability","Ability.html#method-i-2B","(other)",""],["+","Distance","Distance.html#method-i-2B","(other)",""],["-","Distance","Distance.html#method-i-2D","(other)",""],["/","Distance","Distance.html#method-i-2F","(other)",""],["<<","Codex","Codex.html#method-i-3C-3C","(o)",""],["<=>","Distance","Distance.html#method-i-3C-3D-3E","(other)",""],["==","Dice","Dice.html#method-i-3D-3D","(other)","<p>Two instances of Dice are considered equal if they have the same count,\nsides and modifier\n"],["==","Distance","Distance.html#method-i-3D-3D","(other)",""],["Dice","Kernel","Kernel.html#method-c-Dice","(other)",""],["Distance","Kernel","Kernel.html#method-c-Distance","(other)",""],["ability_score_increases","Race","Race.html#method-i-ability_score_increases","()",""],["ability_score_increases=","Race","Race.html#method-i-ability_score_increases-3D","(value)",""],["ac","Armor","Armor.html#method-i-ac","(_wearer)",""],["ac","LightArmor","LightArmor.html#method-i-ac","(wearer)",""],["ac","MediumArmor","MediumArmor.html#method-i-ac","(wearer)",""],["add","Ability","Ability.html#method-i-add","(other)",""],["add","Codex","Codex.html#method-i-add","(o)",""],["alter_ability","Character","Character.html#method-i-alter_ability","(name, by:)",""],["base_speed","Character","Character.html#method-i-base_speed","()",""],["cast","Ability::Type","Ability/Type.html#method-i-cast","(value)",""],["cast","Codex::Type","Codex/Type.html#method-i-cast","(value)",""],["changed_in_place?","Codex::Type","Codex/Type.html#method-i-changed_in_place-3F","(raw_old_value, new_value)",""],["character","CharacterCreation","CharacterCreation.html#method-i-character","()",""],["character_class=","Character","Character.html#method-i-character_class-3D","(character_class)",""],["choose_character_class","CharacterCreation","CharacterCreation.html#method-i-choose_character_class","(character_class)",""],["choose_race","CharacterCreation","CharacterCreation.html#method-i-choose_race","(race)",""],["darkvision","Character","Character.html#method-i-darkvision","()",""],["darkvision","Race","Race.html#method-i-darkvision","()",""],["darkvision=","Race","Race.html#method-i-darkvision-3D","(value)",""],["expand","Codex","Codex.html#method-i-expand","()",""],["extend_object","Race","Race.html#method-i-extend_object","(o)",""],["feet","Distance::Refinements","Distance/Refinements.html#method-i-feet","()",""],["foot","Distance::Refinements","Distance/Refinements.html#method-i-foot","()",""],["gain_language","Character","Character.html#method-i-gain_language","(*language_or_languages)",""],["gain_proficiency","Character","Character.html#method-i-gain_proficiency","(*proficiency_or_proficiencies)",""],["hit_dice","Character","Character.html#method-i-hit_dice","()",""],["hit_die_type","CharacterClass","CharacterClass.html#method-i-hit_die_type","()",""],["hit_die_type=","CharacterClass","CharacterClass.html#method-i-hit_die_type-3D","(value)",""],["include?","Codex","Codex.html#method-i-include-3F","(o)",""],["languages","Race","Race.html#method-i-languages","()",""],["languages=","Race","Race.html#method-i-languages-3D","(value)",""],["modifier","Ability","Ability.html#method-i-modifier","()",""],["new","Ability","Ability.html#method-c-new","(score)",""],["new","Armor","Armor.html#method-c-new","(base_ac, penalises_stealth: false)",""],["new","CharacterClass","CharacterClass.html#method-c-new","(hit_die_type: nil, &block)",""],["new","Codex","Codex.html#method-c-new","(*values)",""],["new","Codex::Type","Codex/Type.html#method-c-new","(codex_class = Codex, **kwargs)",""],["new","Dice","Dice.html#method-c-new","(count = 1, type = :d6, sides: sides_from_type(type), modifier: 0)","<p>Creates a new <code>Dice</code> instance. The dice type (ie. its number of\nsides) can be specified either by passing …\n"],["new","Dice::Roll","Dice/Roll.html#method-c-new","(dice_scores, modifier: 0)",""],["new","Distance","Distance.html#method-c-new","(length)",""],["new","HeavyArmor","HeavyArmor.html#method-c-new","(ac, str: nil, **kwargs)",""],["new","Race","Race.html#method-c-new","(**definition, &block)",""],["parse","Dice","Dice.html#method-c-parse","(notation)","<p>Returns a <code>Dice</code> object from a dice notation, eg. <code>2d10 +\n2</code>\n"],["proficiencies","Race","Race.html#method-i-proficiencies","()",""],["proficiencies=","Race","Race.html#method-i-proficiencies-3D","(value)",""],["race=","Character","Character.html#method-i-race-3D","(race)",""],["required_strength","HeavyArmor","HeavyArmor.html#method-i-required_strength","()",""],["roll!","Dice","Dice.html#method-i-roll-21","(random = Random)","<p>Rolls the dice once and returns the result as a Dice::Roll instance\n"],["serialize","Ability::Type","Ability/Type.html#method-i-serialize","(value)",""],["serialize","Codex::Type","Codex/Type.html#method-i-serialize","(codex)",""],["speed","Character","Character.html#method-i-speed","()",""],["speed","Race","Race.html#method-i-speed","()",""],["speed=","Race","Race.html#method-i-speed-3D","(value)",""],["speed_penalty","Armor","Armor.html#method-i-speed_penalty","(_wearer)",""],["speed_penalty","HeavyArmor","HeavyArmor.html#method-i-speed_penalty","(wearer)",""],["subrace","Race","Race.html#method-i-subrace","(**definition, &block)",""],["to_f","Distance","Distance.html#method-i-to_f","()",""],["to_i","Distance","Distance.html#method-i-to_i","()",""],["to_s","Distance","Distance.html#method-i-to_s","()",""],["total","Dice::Roll","Dice/Roll.html#method-i-total","()",""],["manifest.js","","app/assets/config/manifest_js.html","","<p>//= link_tree ../images //= link_directory ../javascripts .js //=\nlink_directory ../stylesheets .css …\n"],["application.js","","app/assets/javascripts/application_js.html","","<p>// This is a manifest file that&#39;ll be compiled into application.js,\nwhich will include all the files …\n"],["cable.js","","app/assets/javascripts/cable_js.html","","<p>// Action Cable provides the framework to deal with WebSockets in Rails. //\nYou can generate new channels …\n"],["application.css","","app/assets/stylesheets/application_css.html","","\n<pre>This is a manifest file that&#39;ll be compiled into application.css, which will include all the files\nlisted ...</pre>\n"],["application.js","","app/javascript/packs/application_js.html","","\n<pre>eslint no-console:0</pre>\n<p>// This file is automatically compiled by Webpack, along with any other\nfiles // present …\n"]]}}